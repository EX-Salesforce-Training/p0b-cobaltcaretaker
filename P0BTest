@isTest
public class P0BTest {

    //test for nFibonacci
    
    @isTest
    public static void nFibonacciTest() {
        
        integer result = P0B.nFibonacci(0);
        //system.assertEquals with () values tests 
        //given against expected
        
            system.assertEquals(0,result);
        	result = P0B.nFibonacci(1);
        	system.assertEquals(1,result);
            result = P0B.nFibonacci(2);
            system.assertEquals(1,result);
        	result =P0B.nFibonacci(10);
            system.assertEquals(55,result);
        
    }       
}
 
//Test for sortArray
    @isTest
    public static void sortArrayTest() {
    
        List<integer> input = new List<integer>{2,4,5,1,3,1};
        List<integer> output = new List<integer>{1,1,2,3,4,5};
        List<integer> result = new List<integer>(P0B.sortArray(input));
        
        List<integer> input2 = new List<integer>{5,4,3,2,1};
        List<integer> output2 = new List<integer>{1,2,3,4,5};
        List<integer> result2 = new List<integer>(P0B.sortArray(input2));
        
        system.assertEquals(output, result);
        system.assertEquals(output2, result2);
    }
 
//Test for nFactorial
    @isTest
    public static void nFactorialTest() {
    
        system.assertEquals(1,P0B.nFactorial(0)); 
        system.assertEquals(1, P0B.nFactorial(1)); 
        system.assertEquals(6, P0B.nFactorial(3)); 
    }

//Test for rotateLeftNTimes
    @isTest
    public static void rotateLeftNTimesTest() {
    
        List<integer> input = new List<integer>{1,2,3,4,5};
        List<integer> output = new List<integer>{2,3,4,5,1};
        List<integer> result = new List<integer>(P0B.rotateLeftNTimes(input, 1));
       
        List<integer> result2 = new List<integer>(P0B.rotateLeftNTimes(input, 6));
      
        List<integer> output3 = new List<integer>{4,5,1,2,3};
        List<integer> result3 = new List<integer>(P0B.rotateLeftNTimes(input, 3));
        
        system.assertEquals(output, result);
        system.assertEquals(output, result2);
        system.assertEquals(output3, result3);
    }
   
//Test for bracketsAreBalanced
    @isTest
    public static void bracketsAreBalancedTest() { 
    
        system.assertEquals(True, P0B.bracketsAreBalanced('()'));
        system.assertEquals(True, P0B.bracketsAreBalanced('( ) ( )'));
        system.assertEquals(True, P0B.bracketsAreBalanced('(())'));
        system.assertEquals(True, P0B.bracketsAreBalanced('( { [ ] } )'));
        system.assertEquals(True, P0B.bracketsAreBalanced(' '));
        system.assertEquals(False, P0B.bracketsAreBalanced('('));
        system.assertEquals(False, P0B.bracketsAreBalanced(')'));
        system.assertEquals(False, P0B.bracketsAreBalanced('(()'));
        system.assertEquals(False, P0B.bracketsAreBalanced('([)]'));
    }
}
